@page "/"
@using System.IdentityModel.Tokens.Jwt
@using System.Text.Json

<PageTitle>Home</PageTitle>

<style>   

    .jwt-encode{
        width: 100%;
        min-height: 400px;
    }
    .jwt-decode {
        word-break: break-word;
        font-family: 'fakt-web', 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }
    .card-header{
        font-size: 10px;
    }

    .card-text{
        font-size: 14px;
    }
    .header-text{
        color: #ff2424;
    }

    .payload-text{
        color: #4f00e3;
    }
    
</style>

<h3>Decodificar Token JWT</h3>

<h6>Algoritmo RS256</h6>
<br>

<div class="row align-items-start">
    <div class="col-6">
        <p>
            <b>JWT Codificado</b>
        </p>

        <InputTextArea class="jwt-encode" id="userInput" @bind-Value="userInput" @oninput="OnChangeInput" rows="10" />
    </div>
    <div class="col-6">
        <p>
            <b>JWT Decodificado</b>            
        </p>
        
        <div class="jwt-decode">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="card border-danger">
                    <div class="card-header">
                        ERRO
                    </div>
                    <div class="card-body text-danger">
                        <p class="card-text header-text">
                            @errorMessage
                        </p>
                    </div>                   
                </div>
            }
            else
            {
                <div class="card border-secondary">
                    <div class="card-header">
                        HEADER
                    </div>
                    <div class="card-body text-secondary">
                        <pre class="card-text header-text">
                            @headerJWT
                        </pre>
                    </div>

                    <div class="card-header">
                        PAYLOAD
                    </div>
                    <div class="card-body text-secondary">
                        <pre class="card-text payload-text">
                            @payloadJWT
                        </pre>
                    </div>
                </div>
            }                     
        </div>    
    </div>
</div>

@code {
    private string headerJWT = string.Empty;
    private string payloadJWT = string.Empty;
    private string userInput = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        DecodeJwt(userInput);
    }

    private void OnChangeInput(ChangeEventArgs e)
    {
        errorMessage = string.Empty;

        var inputValue = e.Value?.ToString();

        DecodeJwt(inputValue);
    }

    private void DecodeJwt(string? token)
    {
        if (string.IsNullOrEmpty(token)) return;

        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadJwtToken(token);
            
            var header = jsonToken.Header;
            headerJWT = JsonSerializer.Serialize(header, new JsonSerializerOptions { WriteIndented = true });
            
            var payload = jsonToken.Payload;
            payloadJWT = JsonSerializer.Serialize(payload, new JsonSerializerOptions { WriteIndented = true });
        }
        catch(Exception)
        {
            errorMessage = "Não foi possível decodificar o Token JWT!";
        }       
    }
}


