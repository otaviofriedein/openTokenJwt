@page "/"
@using System.IdentityModel.Tokens.Jwt
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Text.Unicode
@using System.Text.RegularExpressions
@using System.Web

<link rel="stylesheet" href="css/home.css" />

<PageTitle>Home</PageTitle>

<h3>Decodificar Token JWT</h3>

<h6>Algoritmo RS256</h6>
<br>

<div class="row align-items-start">
    <div class="col-6">
        <p><b>JWT Codificado</b></p>

        <InputTextArea class="jwt-encode" id="userInput" @bind-Value="userInput" @oninput="OnChangeInput" rows="10" />
    </div>
    <div class="col-6">
        <p>
            <b>JWT Decodificado</b>            
        </p>
        
        <div class="jwt-decode">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="card border-danger">
                    <div class="card-header">
                        ERRO
                    </div>
                    <div class="card-body text-danger">
                        <p class="card-text header-text">
                            @errorMessage
                        </p>
                    </div>                   
                </div>
            }
            else
            {
                <div class="card border-secondary">
                    <div class="card-header">
                        HEADER
                    </div>
                    <div class="card-body text-secondary">
                        <pre class="card-text header-text">
                            @headerJWT
                        </pre>
                    </div>

                    <div class="card-header">
                        PAYLOAD
                    </div>
                    <div class="card-body text-secondary">
                        <pre class="card-text payload-text">
                            @((MarkupString)payloadJWT)
                        </pre>
                    </div>
                </div>
            }                     
        </div>    
    </div>
</div>


@code {
    private string errorMessage = string.Empty;
    private string headerJWT = string.Empty;
    private string payloadJWT = string.Empty;
    private string userInput = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";

    protected override void OnInitialized()
    {
        DecodeJwt(userInput);
    }

    private void OnChangeInput(ChangeEventArgs e)
    {
        errorMessage = string.Empty;

        var inputValue = e.Value?.ToString();

        DecodeJwt(inputValue);
    }

    private void DecodeJwt(string? token)
    {
        if (string.IsNullOrEmpty(token)) return;

        try
        {
            var jsonToken = new JwtSecurityTokenHandler().ReadJwtToken(token);
            var jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            };

            headerJWT = JsonSerializer.Serialize(jsonToken.Header, jsonOptions);

            var payloadSerialized = JsonSerializer.Serialize(jsonToken.Payload, jsonOptions);      
            payloadJWT = AddTitleToValues(payloadSerialized);
        }
        catch(Exception)
        {
            errorMessage = "Não foi possível decodificar o Token JWT!";
        }       
    }

    private string AddTitleToValues(string jsonString)
    {
        jsonString = AddTitleDateTime(jsonString, "iat");
        jsonString = AddTitleDateTime(jsonString, "nbf");
        jsonString = AddTitleDateTime(jsonString, "exp");
        jsonString = AddTitleDateTime(jsonString, "auth_time");

        return jsonString;
    }

    private string AddTitleDateTime(string jsonString, string prop)
    {
        string pattern = $"\"{prop}\":\\s*(\\d+)";

        Match match = Regex.Match(jsonString, pattern);

        if (match.Success)
        {
            string result = match.Groups[1].Value;
            var dataHora = TimeZoneInfo.ConvertTimeFromUtc(DateTimeOffset.FromUnixTimeSeconds(long.Parse(result)).DateTime, TimeZoneInfo.Local);
            var dataHoraFormatada = dataHora.ToString("dd/MM/yyyy HH:mm:ss");
            jsonString = Regex.Replace(jsonString, pattern, $"\"{prop}\":<span title='{dataHoraFormatada}'>{result}</span>");
        }

        return jsonString;
    }
}
